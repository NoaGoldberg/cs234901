noa.goldberg@campus.technion.ac.il, orgad.hadas@campus.technion.ac.il, talsk@campus.technion.ac.il
Noa Goldberg, Hadas Orgad, Tal Skverer
We created a new flow graph: we duplicated every vertex s (total time) times, such that for every vertex v we created the vertices v + i * n for every timestep (i in [s]).
Then, for each edge (u,v) with capacity p and time t, we added an edge from u + j * n to v + (j + t) * n for each j in [s]. In other words, we "let" p people walk from edge u in timestep j to edge v in timestep j + t (the time it takes to travel on this edge).
To complete the flow graph, we created a source vertex that connects to the initial vertex i at timestep 0 with capacity g, and connected all vertices that are has a medical facility at any timestep to a target vertex with infinite capacity.
To allow "waiting" at a vertex, we connected any vertex v + i * n to v + (i + 1 * n) with infinite capacity.
Then, the required answer is exactly the max-flow of this graph.
Note that we encountered a memeory limit error, which results from EK algorithm allocating n by n matrix (and since we duplicated our vertices, n was quite large), so we opted to use a map instead of the second vector to use less space.
In terms of time complexity, our algorithm is faster than EK, which thus caps the time complexity at O(VE^2), which in our case is O((s * n)* (s * m)^2) = O(s^3 * n * m), and plugging in the numbers, we get 100^3 * 1000 * 1000 = 1e13 which we expected to give us a time limit, but we noticed that the problem has a time limit of 6 seconds, which is relatively long, and indeed the tests had passed.