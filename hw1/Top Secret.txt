talsk@campus.technion.ac.il
Tal Skverer
Notice that first, each step s out of the S steps necessary is a linear operation, that for every number x_i_s, (i in [N]) we calculate:
x_i_s = 1 * x_i_s-1 + L * x_i-1_s-1 + R *x_i+1_s-1 (Ths, of course, treating the imaginary "vector" as cyclic).
Therefore, we can write the operation as a matrix multiplication, A*x, where A is the circulant matrix [1, R, 0, ..., 0, L] of size N giving the desired result.
Because applying this operation S times just results in S matrix multiplication, we get that the final result is (A^s)*x.
Therefore, our algorithm is simple - calculate A^s using the fast exponent alogirthm as seen in the lecture and calculate one final matrix multiplication. 
At the beginning I tried naively using the algorithm on the full N by N matrix, and got time limit, probably since the maximum amount of iterations is still above 10^7 :( (O(N^3 log(S)) approximately equals to 10 ** 12 in the worst-case of this question).
Therefore, I re-implemented everything using just one vector to represent each matrix (because they're circulant), which made everything much harder but the solution was accepted.
This implementation is of complexity O(N^2 * log(S)) which was fine.
Good test cases were already given, for example S=0 and S=999999999, while also having at least on number as 0.